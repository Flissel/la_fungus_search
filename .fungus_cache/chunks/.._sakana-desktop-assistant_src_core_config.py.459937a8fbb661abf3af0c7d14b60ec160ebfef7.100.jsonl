# file: ..\sakana-desktop-assistant\src\core\config.py | lines: 1-95 | window: 100
import os
from dataclasses import dataclass
from pathlib import Path
from typing import Optional
import yaml
from dotenv import load_dotenv

load_dotenv()

@dataclass
class Config:
    """Configuration for Sakana Desktop Assistant"""
    
    # Paths
    base_dir: Path = Path(__file__).parent.parent.parent
    data_dir: Path = None
    models_dir: Path = None
    plugins_dir: Path = None
    
    # LLM Settings
    llm_provider: str = "local"  # local, openai, anthropic
    model_name: str = "llama-3.2-3b"
    api_key: Optional[str] = None
    temperature: float = 0.7
    max_tokens: int = 2048
    
    # Memory Settings
    memory_db_path: Path = None
    max_short_term_memory: int = 100
    max_long_term_memory: int = 10000
    
    # Learning Settings
    learning_rate: float = 0.01
    evolution_generations: int = 10
    population_size: int = 20
    mutation_rate: float = 0.1
    
    # Security Settings
    sandbox_enabled: bool = True
    max_execution_time: int = 30  # seconds
    allowed_operations: list = None
    audit_log_path: Path = None
    
    # UI Settings
    enable_gui: bool = True
    enable_voice: bool = False
    theme: str = "dark"
    
    def __post_init__(self):
        # Set default paths
        if self.data_dir is None:
            self.data_dir = self.base_dir / "data"
        if self.models_dir is None:
            self.models_dir = self.base_dir / "models"
        if self.plugins_dir is None:
            self.plugins_dir = self.base_dir / "plugins"
        if self.memory_db_path is None:
            self.memory_db_path = self.data_dir / "memory.db"
        if self.audit_log_path is None:
            self.audit_log_path = self.data_dir / "audit.log"
        
        # Create directories
        self.data_dir.mkdir(exist_ok=True)
        self.models_dir.mkdir(exist_ok=True)
        self.plugins_dir.mkdir(exist_ok=True)
        
        # Set default allowed operations
        if self.allowed_operations is None:
            self.allowed_operations = [
                "read_file",
                "write_file",
                "execute_code",
                "search_web",
                "manage_tasks"
            ]
        
        # Load API key from environment
        if self.api_key is None:
            self.api_key = os.getenv("OPENAI_API_KEY") or os.getenv("ANTHROPIC_API_KEY")
    
    @classmethod
    def from_yaml(cls, path: Path) -> "Config":
        """Load configuration from YAML file"""
        with open(path, 'r') as f:
            data = yaml.safe_load(f)
        return cls(**data)
    
    def to_yaml(self, path: Path):
        """Save configuration to YAML file"""
        data = {
            k: str(v) if isinstance(v, Path) else v
            for k, v in self.__dict__.items()
        }
        with open(path, 'w') as f:
            yaml.dump(data, f, default_flow_style=False)
