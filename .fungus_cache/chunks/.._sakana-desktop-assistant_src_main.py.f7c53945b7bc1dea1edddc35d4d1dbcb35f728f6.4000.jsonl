# file: ..\sakana-desktop-assistant\src\main.py | lines: 1-162 | window: 4000
#!/usr/bin/env python3
"""
Sakana Desktop Assistant - Self-learning AI assistant inspired by Sakana AI
"""

import asyncio
import signal
import sys
from pathlib import Path
import logging
from datetime import datetime
import argparse
from typing import Optional

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.core import Config, SakanaAssistant
from src.ui.cli_interface import CLIInterface

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('sakana_assistant.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class AssistantRunner:
    """Main runner for the assistant"""
    
    def __init__(self, config_path: Optional[Path] = None):
        # Load configuration
        if config_path and config_path.exists():
            self.config = Config.from_yaml(config_path)
        else:
            self.config = Config()
        
        self.assistant = None
        self.interface = None
        self.running = False
    
    async def initialize(self):
        """Initialize the assistant and interface"""
        
        logger.info("Initializing Sakana Desktop Assistant...")
        
        # Create assistant
        self.assistant = SakanaAssistant(self.config)
        await self.assistant.initialize()
        
        # Create interface
        if self.config.enable_gui:
            # TODO: Implement GUI interface
            logger.info("GUI not yet implemented, using CLI")
            self.interface = CLIInterface(self.assistant)
        else:
            self.interface = CLIInterface(self.assistant)
        
        await self.interface.initialize()
        
        logger.info("Assistant ready!")
    
    async def run(self):
        """Run the assistant"""
        
        self.running = True
        
        # Print welcome message
        print("\n" + "="*60)
        print("*** Sakana Desktop Assistant ***")
        print("Self-learning AI that adapts to your needs")
        print("="*60)
        print("\nCommands:")
        print("  /help     - Show available commands")
        print("  /plugins  - List loaded plugins")
        print("  /stats    - Show learning statistics")
        print("  /exit     - Exit the assistant")
        print("\nType your message or command...\n")
        
        try:
            # Run the interface
            await self.interface.run()
        except KeyboardInterrupt:
            logger.info("Received interrupt signal")
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """Shutdown the assistant gracefully"""
        
        if not self.running:
            return
        
        self.running = False
        logger.info("Shutting down assistant...")
        
        if self.interface:
            await self.interface.shutdown()
        
        if self.assistant:
            await self.assistant.shutdown()
        
        logger.info("Shutdown complete")
    
    def handle_signal(self, sig, frame):
        """Handle system signals"""
        
        logger.info(f"Received signal {sig}")
        asyncio.create_task(self.shutdown())

async def main():
    """Main entry point"""
    
    parser = argparse.ArgumentParser(description="Sakana Desktop Assistant")
    parser.add_argument(
        "--config",
        type=Path,
        help="Path to configuration file"
    )
    parser.add_argument(
        "--no-gui",
        action="store_true",
        help="Disable GUI and use CLI only"
    )
    parser.add_argument(
        "--learning",
        choices=["on", "off"],
        default="on",
        help="Enable/disable self-learning"
    )
    
    args = parser.parse_args()
    
    # Create runner
    runner = AssistantRunner(args.config)
    
    # Override config with command line args
    if args.no_gui:
        runner.config.enable_gui = False
    
    if args.learning == "off":
        runner.config.learning_enabled = False
    
    # Setup signal handlers
    signal.signal(signal.SIGINT, runner.handle_signal)
    signal.signal(signal.SIGTERM, runner.handle_signal)
    
    # Initialize and run
    await runner.initialize()
    await runner.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"Fatal error: {e}", exc_info=True)
        sys.exit(1)
